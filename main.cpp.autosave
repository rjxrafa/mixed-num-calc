#include <iostream>
#include "calculate.h"
#include "parser.h"
#include "token.h"
#include <regex>
using namespace std;

void introduction();
//brief intro to the program

bool checkCL(int count);
//checks if there are any arguments in the command line, returns flag if true or false

int main(int argc, char *argv[])
{
//    Parser a;
//    cout << "Output: " << a.parse("( 3/5 + 5 ) / ( 8 + -1 )") << endl;
//    string temp = "3 3 3";
//    string output;

//    while (1)
//    {
//        try
//        {
//            Token a;
//            string temp;
//            getline(cin,temp);
//            std::stringstream ss(temp);
//            ss >> a;
//            cin.clear();
//            cout << "\nVal: " << a.getValue()
//                 << "\nType:" << a.getType()
//                 << "\nString:" << a.getString()
//                 << endl;
//        } catch (...)
//        {
//            cout << "\nAn unknown error has occured.\n";
//        }
//    }

//    std::regex m ("((\\+|\\-)?(\\d+)((\\/\\d+)|(\\.\\d+)|( \\d+/\\d+))?)"); // MixedNum search
//    std::smatch matches;
////    std::regex m ("[-*\\+/]"); // Operator search

////    string temp = "*";
////    cout << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
////     temp = "/";
////    cout << endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
////     temp = "^";
////    cout << endl<< std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
////     temp = "+";
////    cout << endl<< std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
////     temp = "*";
////    cout << endl<< std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
////    temp = "-";
////   cout << endl<< std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
////   temp = "-4";
////  cout << endl<< std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;


//    string temp = "3 -2/3 ";
//    cout << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "3 2/3";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "2/3";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "-3 2/3";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "5.2";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "-5.2";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "-3 -3";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "5x";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "5-";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "5-3";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "55";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
//    temp = "55/55";
//    cout << std::endl << std::boolalpha << temp << ": "<< (std::regex_match(temp, matches, m)) ? true : false;
    introduction();
    bool CL = checkCL(argc);
    
    if(CL)
    {
        
    }
    else
    {
        while(1)
        {
            try {
                cout << "\nPlease enter a desired expression:" << endl;
                string temp;
                getline(cin,temp);
                Parser a;
                a << temp;
        
        //            cout << "\nPlease enter a postfix expression: " << endl;
        //            string temp2;
        //            getline(cin, temp2);
        //            Calculate b;
        //            b << temp2;
            } catch (...) {
                cout << "\nAn unknown error has occured.";
            }
        }
    }
    return 0;
}

void introduction()
{
    string border(80, '*');

    cout << border << endl;
    cout << "Program Description." << endl;
    cout << border << endl;
}
bool checkCL(int count)
{
    //if command line containes 1 or 2 parameters (excluding the name of the program)
    if(count == 2)
    {
        return true;
    }
    //if command line contains more than 2 parameters, error out
    else if(count > 2)
    {
        cout << "Error, there is more than one parameter on the command line \n"
             << "The program will now exit \n";
        exit(1);
    }
    //if no command line arguments, return false
    return false;
}